module symengine

  use iso_c_binding
  use symengine_cwrapper
  implicit none
  private

  public :: basic, operator(==), operator(/=)

  type :: basic
    type(c_ptr) :: ptr = c_null_ptr
  contains
    final :: fbasic_free

    procedure :: zero => fbasic_const_zero
    procedure :: one => fbasic_const_one
    procedure :: minus_one => fbasic_const_minus_one
    procedure :: I => fbasic_const_I

    procedure :: pi => fbasic_const_pi
    procedure :: E => fbasic_const_E
    procedure :: EulerGamma => fbasic_const_EulerGamma
    procedure :: Catalan => fbasic_const_Catalan
    procedure :: GoldenRatio => fbasic_const_GoldenRatio
  end type

  interface operator(==)
    module procedure fbasic_eq
  end interface

  interface operator(/=)
    module procedure fbasic_neq
  end interface

  interface basic
    module procedure new_basic
  end interface

contains

  type(basic) function new_basic(heap)
    logical, intent(in), optional :: heap

    logical :: heap_

    heap_ = .false.
    if (present(heap)) heap_ = heap

    if (heap) then
      new_basic%ptr = basic_new_heap()
    else
      call basic_new_stack(new_basic%ptr)
    end if
  end function

  subroutine fbasic_free(self)
    type(basic) :: self
    call basic_free_stack(self%ptr)
  end subroutine

  logical function fbasic_eq(a,b) result(res)
    class(basic), intent(in) :: a, b
    if (basic_eq(a%ptr,b%ptr) > 0) then
      res = .true.
    else
      res = .false.
    end if
  end function
  logical function fbasic_neq(a,b) result(res)
    class(basic), intent(in) :: a, b
    if (basic_neq(a%ptr,b%ptr) > 0) then
      res = .true.
    else
      res = .false.
    end if
  end function


#:def FBASIC_CONST(const)
  subroutine fbasic_const_${const}$(self)
    class(basic), intent(inout) :: self
    call basic_const_${const}$(self%ptr)
  end subroutine
#:enddef FBASIC_CONST

@:FBASIC_CONST(zero)
@:FBASIC_CONST(one)
@:FBASIC_CONST(minus_one)
@:FBASIC_CONST(I)
@:FBASIC_CONST(pi)
@:FBASIC_CONST(E)
@:FBASIC_CONST(EulerGamma)
@:FBASIC_CONST(Catalan)
@:FBASIC_CONST(GoldenRatio)
@:FBASIC_CONST(infinity)
@:FBASIC_CONST(neginfinity)
@:FBASIC_CONST(complex_infinity)
@:FBASIC_CONST(nan)

end module